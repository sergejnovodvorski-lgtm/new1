import streamlit as st
import gspread
import pandas as pd
import re
from datetime import datetime, timedelta
import urllib.parse
import time
from typing import List, Dict, Any
import math
from io import StringIO


# =========================================================
# 1. –ö–û–ù–°–¢–ê–ù–¢–´ –ò –ù–ê–°–¢–†–û–ô–ö–ò
# =========================================================


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets
SPREADSHEET_NAME = "Start" 
WORKSHEET_NAME_ORDERS = "–ó–ê–Ø–í–ö–ò"
WORKSHEET_NAME_PRICE = "–ü–†–ê–ô–°"


# –ó–∞–≥–æ–ª–æ–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞ –ª–∏—Å—Ç–µ '–ó–ê–Ø–í–ö–ò'
EXPECTED_HEADERS = [
    "–î–ê–¢–ê_–í–í–û–î–ê", "–ù–û–ú–ï–†_–ó–ê–Ø–í–ö–ò", "–¢–ï–õ–ï–§–û–ù", "–ê–î–†–ï–°", "–î–ê–¢–ê_–î–û–°–¢–ê–í–ö–ò", 
    "–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô", "–ó–ê–ö–ê–ó", "–°–£–ú–ú–ê"
]


# –£–ö–ê–ñ–ò–¢–ï –°–í–û–ô –ù–û–ú–ï–† –ú–ï–ù–ï–î–ñ–ï–†–ê 
MANAGER_WHATSAPP_PHONE = "79000000000" 


st.set_page_config(
    page_title="CRM: –í–≤–æ–¥ –ù–æ–≤–æ–π –ó–∞—è–≤–∫–∏", 
    layout="wide",
    initial_sidebar_state="expanded"
)


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def set_critical_error(message, error_details=None):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    full_message = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {message}"
    if error_details:
        full_message += f"\n\n–î–µ—Ç–∞–ª–∏: {error_details}"
    st.session_state.critical_error = full_message
    
def get_default_delivery_date():
    return datetime.today().date() + timedelta(days=1)


def load_last_order_number_safe() -> str:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è load_last_order_number, —á—Ç–æ–±—ã –Ω–µ –≤—ã–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É –Ω–∞ —Å—Ç–∞—Ä—Ç–µ."""
    try:
        return load_last_order_number() 
    except Exception:
        return "1001"


def clear_form_state():
    """–°–±—Ä–æ—Å –≤—Å–µ—Ö –ø–æ–ª–µ–π –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏."""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
    current_mode = st.session_state.get('app_mode', 'new')
    
    # –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    keys_to_keep = ['app_mode', 'mode_selector_value', 'critical_error']
    new_state = {key: st.session_state.get(key) for key in keys_to_keep}
    
    st.session_state.clear()
    st.session_state.update(new_state)
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    st.session_state.calculator_items = []
    st.session_state.k_order_number = load_last_order_number_safe()
    st.session_state.k_delivery_date = get_default_delivery_date()
    st.session_state.k_target_row_index = None
    st.session_state.do_clear_form = False
    st.session_state.last_success_message = None
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞
    st.session_state.k_client_phone = ""
    st.session_state.k_address = ""
    st.session_state.k_comment = ""
    st.session_state.conversation_text_input = ""
    st.session_state.k_order_number_input = st.session_state.k_order_number if current_mode == 'new' else ""
    st.session_state.parsing_log = ""
    st.session_state.new_item_qty = 1


def is_valid_phone(phone: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –∫ —Ñ–æ—Ä–º–∞—Ç—É 7XXXXXXXXXX. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É."""
    normalized = re.sub(r'\D', '', phone) # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ-—Ü–∏—Ñ—Ä—ã
    
    # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ 7
    if normalized.startswith('8') and len(normalized) == 11:
        normalized = '7' + normalized[1:]


    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω —Ñ–æ—Ä–º–∞—Ç—É 7XXXXXXXXXX
    if len(normalized) == 11 and normalized.startswith('7'):
        return normalized
        
    return "" # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω


def switch_mode():
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã."""
    new_mode = 'new' if st.session_state.mode_selector_value == '–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞' else 'edit'
    
    if st.session_state.get('app_mode') != new_mode:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
        mode_selector = st.session_state.mode_selector_value
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        keys_to_keep = ['mode_selector_value', 'critical_error']
        saved_state = {key: st.session_state.get(key) for key in keys_to_keep}
        
        st.session_state.clear()
        st.session_state.update(saved_state)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ä–µ–∂–∏–º
        st.session_state.app_mode = new_mode
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
        if new_mode == 'new':
            st.session_state.k_order_number = load_last_order_number_safe()
            st.session_state.k_order_number_input = st.session_state.k_order_number
        else:
            st.session_state.k_order_number_input = ""
            
        st.session_state.calculator_items = []
        st.session_state.k_delivery_date = get_default_delivery_date()
        st.session_state.k_target_row_index = None
        st.session_state.k_client_phone = ""
        st.session_state.k_address = ""
        st.session_state.k_comment = ""
        st.session_state.conversation_text_input = ""
        st.session_state.parsing_log = ""
        st.session_state.new_item_qty = 1
        
    st.rerun()


# =========================================================
# 2. –§–£–ù–ö–¶–ò–ò –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ò –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø
# =========================================================


@st.cache_resource(ttl=3600)
def get_gsheet_client():
    """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ gspread."""
    if "gcp_service_account" not in st.secrets:
        set_critical_error("–°–µ–∫—Ä–µ—Ç 'gcp_service_account' –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ secrets.toml.")
        return None 
    try:
        gc = gspread.service_account_from_dict(st.secrets["gcp_service_account"])
        return gc
    except Exception as e:
        set_critical_error("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ gspread.", f"–û—à–∏–±–∫–∞: {e}")
        return None


def initialize_worksheet_headers(worksheet: gspread.Worksheet):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞ –ª–∏—Å—Ç '–ó–ê–Ø–í–ö–ò'."""
    try:
        current_headers = worksheet.row_values(1)
        
        if current_headers == EXPECTED_HEADERS:
            return


        if current_headers and len(current_headers) > 0 and current_headers != ['']:
             st.warning("‚ö†Ô∏è –ó–∞–≥–æ–ª–æ–≤–∫–∏ –ª–∏—Å—Ç–∞ '–ó–ê–Ø–í–ö–ò' –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã. –ó–∞–ø–∏—Å—ã–≤–∞—é –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É.")
             worksheet.update('A1', [EXPECTED_HEADERS])
        else:
             worksheet.insert_row(EXPECTED_HEADERS, 1)
             
        st.success("üéâ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ª–∏—Å—Ç–∞ '–ó–ê–Ø–í–ö–ò' —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞.")


    except Exception as e:
        set_critical_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –ª–∏—Å—Ç–∞ '–ó–ê–Ø–í–ö–ò'.", f"–û—à–∏–±–∫–∞: {e}")


@st.cache_data(ttl=5) 
def load_last_order_number() -> str:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π."""
    orders_ws = get_orders_worksheet()
    if not orders_ws:
        return "1001" 


    try:
        column_index = EXPECTED_HEADERS.index("–ù–û–ú–ï–†_–ó–ê–Ø–í–ö–ò") + 1 
        column_values = orders_ws.col_values(column_index)
        
        if len(column_values) <= 1:
            return "1001" 
        
        order_numbers = [int(n) for n in column_values[1:] if n.isdigit()]
        
        if not order_numbers:
            return "1001"
            
        last_number = max(order_numbers)
        next_number = last_number + 1
        return str(next_number)
        
    except Exception as e:
        return "1001" 
        
@st.cache_data(ttl="1h")
def load_price_list():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞ –∏–∑ Google Sheets."""
    gc = get_gsheet_client()
    if not gc: return pd.DataFrame() 
        
    try:
        sh = gc.open(SPREADSHEET_NAME) 
        worksheet = sh.worksheet(WORKSHEET_NAME_PRICE) 
        data = worksheet.get_all_records()
        df = pd.DataFrame(data)
        
        if '–ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï' not in df.columns or '–¶–ï–ù–ê' not in df.columns:
            set_critical_error(
                f"–í –ª–∏—Å—Ç–µ '{WORKSHEET_NAME_PRICE}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã '–ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï' –∏–ª–∏ '–¶–ï–ù–ê'."
            )
            return pd.DataFrame()
        
        df['–¶–ï–ù–ê'] = pd.to_numeric(df['–¶–ï–ù–ê'], errors='coerce') 
        df.dropna(subset=['–¶–ï–ù–ê'], inplace=True)
        
        st.info(f"‚úÖ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ. –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(df)} –ø–æ–∑–∏—Ü–∏–π.")
        return df
    except gspread.exceptions.SpreadsheetNotFound:
        set_critical_error(f"Google –¢–∞–±–ª–∏—Ü–∞ '{SPREADSHEET_NAME}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except gspread.exceptions.WorksheetNotFound:
        set_critical_error(f"–õ–∏—Å—Ç '{WORKSHEET_NAME_PRICE}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        set_critical_error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∞–π—Å–∞ (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã).", f"–û—à–∏–±–∫–∞: {e}")
    return pd.DataFrame()


@st.cache_resource
def get_orders_worksheet():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –ª–∏—Å—Ç–∞ –¥–ª—è –∑–∞—è–≤–æ–∫."""
    gc = get_gsheet_client()
    if not gc: return None
    try:
        sh = gc.open(SPREADSHEET_NAME) 
        worksheet = sh.worksheet(WORKSHEET_NAME_ORDERS)
        
        initialize_worksheet_headers(worksheet)
        
        return worksheet
    except gspread.exceptions.WorksheetNotFound:
        set_critical_error(f"–õ–∏—Å—Ç –¥–ª—è –∑–∞—è–≤–æ–∫ '{WORKSHEET_NAME_ORDERS}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return None
    except Exception as e:
        set_critical_error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–∏—Å—Ç—É '{WORKSHEET_NAME_ORDERS}'.", f"–û—à–∏–±–∫–∞: {e}")
        return None


# =========================================================
# 3. –§–£–ù–ö–¶–ò–Ø –ó–ê–ì–†–£–ó–ö–ò –î–ê–ù–ù–´–• –î–õ–Ø –ö–û–†–†–ï–ö–¢–ò–†–û–í–ö–ò
# =========================================================


def load_order_data(order_number: str):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –ø–æ –Ω–æ–º–µ—Ä—É –∏–∑ Google Sheets –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç st.session_state,
    —Å–æ—Ö—Ä–∞–Ω—è—è –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
    
    –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–µ–ø–µ—Ä—å –∏—â–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é (—Å–∞–º—É—é —Å–≤–µ–∂—É—é) –∑–∞–ø–∏—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è 
    —Å—Ç–∞—Ä—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤, –µ—Å–ª–∏ —Ç–∞–∫–∏–µ –µ—Å—Ç—å.
    """
    orders_ws = get_orders_worksheet()
    if not orders_ws:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return False 


    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ (–∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞)
        data = orders_ws.get_all_records()
        df = pd.DataFrame(data)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞—è–≤–∫–∏
        target_rows = df[df['–ù–û–ú–ï–†_–ó–ê–Ø–í–ö–ò'].astype(str) == order_number]
        
        if target_rows.empty:
            st.warning(f"‚ö†Ô∏è –ó–∞—è–≤–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º **{order_number}** –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            st.session_state.k_target_row_index = None 
            return False


        # --- –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï –î–õ–Ø –ü–ï–†–ï–ó–ê–ü–ò–°–ò: –ë–µ—Ä–µ–º –ü–û–°–õ–ï–î–ù–Æ–Æ –∑–∞–ø–∏—Å—å ---
        # –ò–Ω–¥–µ–∫—Å –≤ –∏—Å—Ö–æ–¥–Ω–æ–º DataFrame (–Ω–∞—á–∏–Ω–∞—è —Å 0)
        row_index_in_df = target_rows.index[-1] 
        # –°–∞–º–∞ —Å—Ç—Ä–æ–∫–∞
        row = target_rows.iloc[-1].to_dict()
        
        # 1. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–∏–Ω–¥–µ–∫—Å –≤ gspread = –∏–Ω–¥–µ–∫—Å –≤ df + 2)
        # +2: 1 –∑–∞–≥–æ–ª–æ–≤–æ–∫ + 1 –∏–∑-–∑–∞ 0-–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
        gspread_row_index = row_index_in_df + 2 
        st.session_state.k_target_row_index = gspread_row_index


        # 2. –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã
        st.session_state.k_order_number = str(row.get('–ù–û–ú–ï–†_–ó–ê–Ø–í–ö–ò', ''))
        st.session_state.k_client_phone = str(row.get('–¢–ï–õ–ï–§–û–ù', ''))
        st.session_state.k_address = str(row.get('–ê–î–†–ï–°', ''))
        st.session_state.k_comment = str(row.get('–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô', ''))
        
        # 3. –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏
        delivery_date_str = str(row.get('–î–ê–¢–ê_–î–û–°–¢–ê–í–ö–ò', ''))
        try:
            date_obj = datetime.strptime(delivery_date_str, '%Y-%m-%d').date()
            st.session_state.k_delivery_date = date_obj
        except (ValueError, TypeError):
            st.session_state.k_delivery_date = get_default_delivery_date()


        # 4. –ü–∞—Ä—Å–∏–º —Å–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞
        order_text = str(row.get('–ó–ê–ö–ê–ó', ''))
        st.session_state.calculator_items = parse_order_text_to_items(order_text)
        
        st.success(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ ‚Ññ**{order_number}** —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏. (–°—Ç—Ä–æ–∫–∞ {gspread_row_index})")
        st.warning("–í–Ω–∏–º–∞–Ω–∏–µ: –ü—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ **—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–∞**!")
        
        return True 


    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏: {e}")
        return False


def parse_order_text_to_items(order_text: str) -> List[Dict[str, Any]]:
    items = []
    pattern = re.compile(r'(.+?) - (\d+)\s*—à—Ç\.\s*\(–ø–æ\s*([\d\s,.]+)\s*–†–£–ë\.\)')
    
    for line in order_text.split('\n'):
        match = pattern.search(line.strip())
        if match:
            name = match.group(1).strip()
            qty = int(match.group(2))
            price_str = match.group(3).replace(' ', '').replace(',', '.')
            try:
                price_per_unit = float(price_str)
            except ValueError:
                price_per_unit = 0.0
            
            items.append({
                '–ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï': name,
                '–ö–û–õ–ò–ß–ï–°–¢–í–û': qty,
                '–¶–ï–ù–ê_–ó–ê_–ï–î': price_per_unit,
                '–°–£–ú–ú–ê': price_per_unit * qty
            })
    return items


# =========================================================
# 4. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø SESSION STATE
# =========================================================


# –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
price_df = load_price_list() 
orders_ws = get_orders_worksheet()
price_items = ["--- –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é ---"] + price_df['–ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï'].tolist() if not price_df.empty else ["--- –ü—Ä–∞–π—Å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω ---"]


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
if 'critical_error' not in st.session_state:
    st.session_state.critical_error = None
    
if 'app_mode' not in st.session_state:
    st.session_state.app_mode = 'new' 
    
if 'mode_selector_value' not in st.session_state:
    st.session_state.mode_selector_value = '–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞'


if 'calculator_items' not in st.session_state:
    st.session_state.calculator_items = []


if 'k_target_row_index' not in st.session_state:
    st.session_state.k_target_row_index = None 
    
if 'do_clear_form' not in st.session_state:
    st.session_state.do_clear_form = False


if 'last_success_message' not in st.session_state:
    st.session_state.last_success_message = None 


if 'k_order_number' not in st.session_state:
    st.session_state.k_order_number = load_last_order_number_safe()


if 'k_order_number_input' not in st.session_state:
    st.session_state.k_order_number_input = st.session_state.k_order_number if st.session_state.app_mode == 'new' else "" 
    
if 'k_client_phone' not in st.session_state:
    st.session_state.k_client_phone = ""
    
if 'k_address' not in st.session_state:
    st.session_state.k_address = "" 
    
if 'k_comment' not in st.session_state:
    st.session_state.k_comment = "" 
    
if 'k_delivery_date' not in st.session_state:
    st.session_state.k_delivery_date = get_default_delivery_date()
    
if 'new_item_qty' not in st.session_state: 
    st.session_state.new_item_qty = 1 
    
if 'parsing_log' not in st.session_state:
    st.session_state.parsing_log = ""
    
if 'conversation_text_input' not in st.session_state:
    st.session_state.conversation_text_input = "" 
    
if 'new_item_select' not in st.session_state:
    st.session_state.new_item_select = price_items[0]


# =========================================================
# 5. –§–£–ù–ö–¶–ò–ò –õ–û–ì–ò–ö–ò (–ü–ê–†–°–ò–ù–ì –ò –ó–ê–ü–ò–°–¨)
# =========================================================


def parse_conversation(text: str):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ st.session_state."""
    
    st.session_state.parsing_log = f"--- –õ–û–ì –ü–ê–†–°–ò–ù–ì–ê ({datetime.now().strftime('%H:%M:%S')}) ---\n"
    
    loaded_data = False 


    # 1. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    phone_matches_raw = re.findall(r'(\d{7,11})', text) 
    phone_counts = {}
    
    st.session_state.parsing_log += f"–ü–æ–∏—Å–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ (—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã): {phone_matches_raw}\n"
    
    for raw_phone in phone_matches_raw:
        normalized_phone = is_valid_phone(raw_phone)
        
        if normalized_phone:
            phone_counts[normalized_phone] = phone_counts.get(normalized_phone, 0) + 1
    
    if phone_counts:
        phone = max(phone_counts.items(), key=lambda item: item[1])[0]
        st.session_state.k_client_phone = phone 
        st.info(f"‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞–π–¥–µ–Ω: **{phone}**")
        st.session_state.parsing_log += f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
    else:
         st.warning("‚ö†Ô∏è –¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é.")
         st.session_state.parsing_log += f"–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.\n"


    # 2. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏/—Å—á–µ—Ç–∞
    order_match = re.search(r'(?:–∑–∞—è–≤–∫[–∞–∏]|–∑–∞–∫–∞–∑|—Å—á–µ—Ç|‚Ññ|–Ω–æ–º–µ—Ä)\s*[\W]*(\d+)', text, re.IGNORECASE)
    
    st.session_state.parsing_log += f"–ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏ (–º–∞—Ç—á): {order_match.group(1) if order_match else 'None'}\n"


    if order_match and st.session_state.app_mode == 'edit':
        found_order_num = order_match.group(1)
        st.session_state.k_order_number_input = found_order_num
        st.session_state.k_order_number = found_order_num
        
        if load_order_data(found_order_num):
             loaded_data = True
             st.info(f"‚úÖ –ù–æ–º–µ—Ä –ó–∞—è–≤–∫–∏ –Ω–∞–π–¥–µ–Ω –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {found_order_num}. –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
             return
    elif order_match and st.session_state.app_mode == 'new':
        st.info(f"üí° –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–º–µ—Ä {order_match.group(1)}, –Ω–æ –≤ —Ä–µ–∂–∏–º–µ '–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞' –æ–Ω –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.")
        
    # 3. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏
    delivery_date = None
    relative_match = ""
    today = datetime.today().date()
    
    if re.search(r'–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞', text, re.IGNORECASE):
        delivery_date = today + timedelta(days=2)
        relative_match = "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ (+2 –¥–Ω—è)"
    elif re.search(r'–∑–∞–≤—Ç—Ä–∞', text, re.IGNORECASE):
        delivery_date = today + timedelta(days=1)
        relative_match = "–∑–∞–≤—Ç—Ä–∞ (+1 –¥–µ–Ω—å)"
    
    st.session_state.parsing_log += f"–ü–æ–∏—Å–∫ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π –¥–∞—Ç—ã: {relative_match or '–ù–µ—Ç'}\n"


    if not delivery_date:
        date_match = re.search(r'(\d{1,2})[./](\d{1,2})(?:[./](\d{2,4}))?', text)
        
        st.session_state.parsing_log += f"–ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã (–º–∞—Ç—á): {date_match.groups() if date_match else 'None'}\n"
        
        if date_match:
            day, month, year_str = date_match.groups()
            current_year = today.year
            
            try:
                if year_str:
                    year = 2000 + int(year_str) if len(year_str) == 2 else int(year_str)
                else:
                    year = current_year
                    
                delivery_date = datetime(year, int(month), int(day)).date()
            except ValueError:
                st.session_state.parsing_log += f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã: {day}.{month}.{year_str or current_year}\n"
                pass
    
    if delivery_date:
        initial_date_str = delivery_date.strftime('%d.%m.%Y')
        year_corrected = False
        
        while delivery_date < today and delivery_date.year < today.year + 1:
            delivery_date = delivery_date.replace(year=delivery_date.year + 1)
            year_corrected = True


        if year_corrected:
            st.warning(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–∞—è –¥–∞—Ç–∞ ({initial_date_str}) –±—ã–ª–∞ –≤ –ø—Ä–æ—à–ª–æ–º. –ì–æ–¥ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω –Ω–∞ **{delivery_date.year}**.")
            st.session_state.parsing_log += f"–ö–æ—Ä—Ä–µ–∫—Ü–∏—è –≥–æ–¥–∞: –ò—Å—Ö–æ–¥–Ω–∞—è {initial_date_str}, –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {delivery_date.year}\n"
            
        st.session_state.k_delivery_date = delivery_date
        st.info(f"‚úÖ –î–∞—Ç–∞ –î–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞–π–¥–µ–Ω–∞: **{delivery_date.strftime('%d.%m.%Y')}**")
    else:
        tomorrow = today + timedelta(days=1)
        st.session_state.k_delivery_date = tomorrow
        st.warning("‚ö†Ô∏è –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ '–∑–∞–≤—Ç—Ä–∞'.")
        st.session_state.parsing_log += f"–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {tomorrow.strftime('%d.%m.%Y')}\n"


    st.rerun()


def save_data_to_gsheets(data_row: List[Any]) -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–æ–∫—É –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –≤ –ª–∏—Å—Ç –ó–ê–Ø–í–ö–ò."""
    if orders_ws is None:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ª–∏—Å—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö.")
        return False
    
    row_index = st.session_state.k_target_row_index
    
    with st.spinner(f"‚è≥ {'–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ' if row_index else '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ'} –∑–∞—è–≤–∫–∏ –≤ Google Sheets..."):
        try:
            if row_index and isinstance(row_index, int) and row_index > 1:
                # –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–£–©–ï–°–¢–í–£–Æ–©–ï–ô –°–¢–†–û–ö–ò
                orders_ws.update(f'A{row_index}:{gspread.utils.rowcol_to_a1(row_index, len(data_row))}', [data_row])
                return True
            else:
                # –î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–û–í–û–ô –°–¢–†–û–ö–ò
                orders_ws.append_row(data_row)
                return True
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ {'–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è' if row_index else '–∑–∞–ø–∏—Å–∏'} –≤ Google Sheets: {e}")
            return False


def handle_save_and_clear(data_to_save: List[Any], is_update: bool):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö."""
    if save_data_to_gsheets(data_to_save):
        success_message = f"üéâ –ó–∞—è–≤–∫–∞ ‚Ññ{st.session_state.k_order_number} —É—Å–ø–µ—à–Ω–æ {'–ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–∞' if is_update else '—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞'}!"
        st.session_state.last_success_message = success_message
        st.session_state.do_clear_form = True


# =========================================================
# 6. –§–£–ù–ö–¶–ò–ò –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê –ò –ò–ù–¢–ï–†–§–ï–ô–°–ê
# =========================================================


def add_item():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –≤ —Å–ø–∏—Å–æ–∫ –≤ session_state."""
    selected_name = st.session_state.new_item_select
    try:
        quantity = int(st.session_state.new_item_qty) 
    except ValueError:
        st.error("–û—à–∏–±–∫–∞: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")
        return
    
    if selected_name != "--- –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é ---" and quantity > 0:
        price_row = price_df[price_df['–ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï'] == selected_name]
        
        if price_row.empty:
             st.error(f"–û—à–∏–±–∫–∞: –ø–æ–∑–∏—Ü–∏—è '{selected_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–µ.")
             return


        price = float(price_row.iloc[0]['–¶–ï–ù–ê'])
        
        st.session_state.calculator_items.append({
            '–ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï': selected_name,
            '–ö–û–õ–ò–ß–ï–°–¢–í–û': quantity,
            '–¶–ï–ù–ê_–ó–ê_–ï–î': price,
            '–°–£–ú–ú–ê': price * quantity
        })


        st.session_state.new_item_qty = 1
        st.session_state.new_item_select = price_items[0]


def remove_item(index: int):
    """–£–¥–∞–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É."""
    if 0 <= index < len(st.session_state.calculator_items):
        st.session_state.calculator_items.pop(index)


def generate_whatsapp_url(target_phone: str, order_data: Dict[str, str], total_sum: float) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ WhatsApp —Å –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º."""
    
    text = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏—Ö:\n"
    text += f"üÜî –ù–æ–º–µ—Ä –ó–∞—è–≤–∫–∏: {order_data['–ù–û–ú–ï–†_–ó–ê–Ø–í–ö–ò']}\n"
    text += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order_data['–¢–ï–õ–ï–§–û–ù']}\n"
    text += f"üìç –ê–¥—Ä–µ—Å: {order_data['–ê–î–†–ï–°']}\n"
    text += f"üóìÔ∏è –î–∞—Ç–∞ –î–æ—Å—Ç–∞–≤–∫–∏: {order_data['–î–ê–¢–ê_–î–û–°–¢–ê–í–ö–ò']}\n"
    
    if order_data.get('–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô'):
        text += f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order_data['–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô']}\n"
        
    text += f"\nüõí –°–æ—Å—Ç–∞–≤ –ó–∞–∫–∞–∑–∞:\n{order_data['–ó–ê–ö–ê–ó']}\n"
    text += f"üí∞ *–ò–¢–û–ì–û: {total_sum:,.2f} –†–£–ë.*\n"
    
    encoded_text = urllib.parse.quote(text)
    
    normalized_phone = is_valid_phone(target_phone)
    if not normalized_phone:
        target_phone_final = MANAGER_WHATSAPP_PHONE
    else:
        target_phone_final = '+' + normalized_phone 
        
    return f"https://wa.me/{target_phone_final}?text={encoded_text}"


# =========================================================
# 7. –û–°–ù–û–í–ù–û–ô –ò–ù–¢–ï–†–§–ï–ô–° STREAMLIT
# =========================================================


if st.session_state.critical_error:
    st.error(st.session_state.critical_error)
    st.stop() 


st.title("–í–≤–æ–¥ –ù–æ–≤–æ–π –ó–∞—è–≤–∫–∏ CRM üìù")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–æ—Ä–º—ã –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ
if st.session_state.do_clear_form:
    if st.session_state.get('last_success_message'):
        st.success(st.session_state.last_success_message)
        st.session_state.last_success_message = None
        
    clear_form_state()
    st.rerun()


# ----------------------------------------------------------------------------------------------------------------------
## –ë–ª–æ–∫ –í—ã–±–æ—Ä–∞ –†–µ–∂–∏–º–∞ –∏ –ü–∞—Ä—Å–∏–Ω–≥–∞
# ----------------------------------------------------------------------------------------------------------------------


st.subheader("–í—ã–±–æ—Ä –†–µ–∂–∏–º–∞ –†–∞–±–æ—Ç—ã")


# –†–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
st.radio(
    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
    options=['–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é'],
    index=0 if st.session_state.app_mode == 'new' else 1,
    key='mode_selector_value',
    horizontal=True,
    on_change=switch_mode
)


mode_text = (
    "‚ûï **–†–µ–∂–∏–º –°–æ–∑–¥–∞–Ω–∏—è –ù–æ–≤–æ–π –ó–∞—è–≤–∫–∏**" 
    if st.session_state.app_mode == 'new' 
    else "üîÑ **–†–µ–∂–∏–º –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∏**"
)
st.info(mode_text)


# --- –ë–ª–æ–∫ –ù–æ–º–µ—Ä–∞ –ó–∞—è–≤–∫–∏ ---
col_num, col_btn = st.columns([3, 1])


with col_num:
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º key='k_order_number_input' –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞
    st.text_input(
        "–ù–æ–º–µ—Ä –ó–∞—è–≤–∫–∏ / –°—á—ë—Ç–∞", 
        key='k_order_number_input',
        value=st.session_state.k_order_number if st.session_state.app_mode == 'new' else st.session_state.k_order_number_input,
        disabled=st.session_state.app_mode == 'new', 
        help="–í —Ä–µ–∂–∏–º–µ '–ù–æ–≤–∞—è' –Ω–æ–º–µ—Ä –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è. –í —Ä–µ–∂–∏–º–µ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å' –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É."
    )
    
with col_btn:
    st.markdown(" ") 
    if st.session_state.app_mode == 'edit':
        if st.button("üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –ó–∞—è–≤–∫—É", type="secondary", use_container_width=True):
            # –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ k_order_number –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∏–∑ k_order_number_input
            st.session_state.k_order_number = st.session_state.k_order_number_input
            load_order_data(st.session_state.k_order_number) 
    else:
        if st.button("üßº –û—á–∏—Å—Ç–∏—Ç—å –§–æ—Ä–º—É", type="secondary", use_container_width=True):
            st.session_state.do_clear_form = True


st.markdown("---")


# --- –ë–ª–æ–∫ –ü–∞—Ä—Å–∏–Ω–≥–∞ ---
with st.expander("ü§ñ –ü–∞—Ä—Å–∏–Ω–≥ –ü–µ—Ä–µ–ø–∏—Å–∫–∏ (–∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω, –¥–∞—Ç—É –∏ –∑–∞–∫–∞–∑)", expanded=False):
    st.subheader("–í—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–ø–∏—Å–∫–∏")
    
    conversation_text = st.text_area(
        "–í—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å –∫–ª–∏–µ–Ω—Ç–æ–º —Å—é–¥–∞:",
        key='conversation_text_input',
        height=150
    )
    
    if st.button("üîç –ó–∞–ø—É—Å—Ç–∏—Ç—å –ü–∞—Ä—Å–∏–Ω–≥ –î–∞–Ω–Ω—ã—Ö", use_container_width=True):
        if conversation_text:
            parse_conversation(conversation_text)


    if st.session_state.parsing_log:
        st.caption("–õ–æ–≥ –ü–∞—Ä—Å–∏–Ω–≥–∞:")
        st.code(st.session_state.parsing_log, language='text')


st.markdown("---")


# ----------------------------------------------------------------------------------------------------------------------
## –§–æ—Ä–º–∞ –í–≤–æ–¥–∞ –û—Å–Ω–æ–≤–Ω—ã—Ö –î–∞–Ω–Ω—ã—Ö
# ----------------------------------------------------------------------------------------------------------------------


st.subheader("–û—Å–Ω–æ–≤–Ω—ã–µ –î–∞–Ω–Ω—ã–µ –ó–∞—è–≤–∫–∏")


col1, col2 = st.columns(2)


with col1:
    st.text_input(
        "–ù–æ–º–µ—Ä –ó–∞—è–≤–∫–∏ (—Ç–µ–∫—É—â–∏–π)", 
        key='k_order_number_display',
        value=st.session_state.k_order_number,
        disabled=True 
    )
    
    st.text_input(
        "–¢–µ–ª–µ—Ñ–æ–Ω –ö–ª–∏–µ–Ω—Ç–∞ (—Å 7)", 
        key='k_client_phone',
        value=st.session_state.k_client_phone
    )


with col2:
    st.date_input(
        "–î–∞—Ç–∞ –î–æ—Å—Ç–∞–≤–∫–∏",
        key='k_delivery_date',
        value=st.session_state.k_delivery_date, 
        min_value=datetime.today().date()
    )
    
    st.text_input(
        "–ê–¥—Ä–µ—Å –î–æ—Å—Ç–∞–≤–∫–∏", 
        key='k_address',
        value=st.session_state.k_address
    )
    
st.text_area(
    "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π / –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ", 
    key='k_comment', 
    value=st.session_state.k_comment,
    height=50
)


st.markdown("---")


# ----------------------------------------------------------------------------------------------------------------------
## –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ó–∞–∫–∞–∑–∞
# ----------------------------------------------------------------------------------------------------------------------


st.subheader("–°–æ—Å—Ç–∞–≤ –ó–∞–∫–∞–∑–∞ (–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä)")


col_item, col_qty, col_add = st.columns([4, 1, 1])


with col_item:
    st.selectbox(
        "–í—ã–±–æ—Ä –ø–æ–∑–∏—Ü–∏–∏", 
        price_items, 
        key='new_item_select',
        disabled=price_df.empty,
        index=price_items.index(st.session_state.new_item_select) if st.session_state.new_item_select in price_items else 0
    )


with col_qty:
    st.number_input(
        "–ö–æ–ª-–≤–æ", 
        min_value=1, 
        step=1,
        key='new_item_qty',
        value=st.session_state.new_item_qty
    )


with col_add:
    st.markdown(" ")
    disable_add = price_df.empty or st.session_state.new_item_select == price_items[0]
    st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å", on_click=add_item, use_container_width=True, disabled=disable_add)


total_sum = 0
if st.session_state.calculator_items:
    
    df_items = pd.DataFrame(st.session_state.calculator_items)
    total_sum = df_items['–°–£–ú–ú–ê'].sum() 
    
    st.dataframe(
        df_items[['–ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï', '–ö–û–õ–ò–ß–ï–°–¢–í–û', '–¶–ï–ù–ê_–ó–ê_–ï–î', '–°–£–ú–ú–ê']],
        column_config={
            '–ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï': '–¢–æ–≤–∞—Ä',
            '–ö–û–õ–ò–ß–ï–°–¢–í–û': '–ö–æ–ª-–≤–æ',
            '–¶–ï–ù–ê_–ó–ê_–ï–î': st.column_config.NumberColumn("–¶–µ–Ω–∞ –∑–∞ –µ–¥.", format="%.2f –†–£–ë."),
            '–°–£–ú–ú–ê': st.column_config.NumberColumn("–°—É–º–º–∞", format="%.2f –†–£–ë."),
        },
        hide_index=True,
        use_container_width=True
    )
    
    st.markdown("##### –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π:")
    for i in range(len(st.session_state.calculator_items) - 1, -1, -1):
         item = st.session_state.calculator_items[i]
         col_name, col_sum, col_del = st.columns([5, 1.5, 0.5])
         with col_name:
             st.write(f"**{item['–ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï']}** ({item['–ö–û–õ–ò–ß–ï–°–¢–í–û']} —à—Ç.)") 
         with col_sum:
             st.write(f"**{item['–°–£–ú–ú–ê']:,.2f} –†–£–ë.**")
         with col_del:
             if st.button("‚ùå", key=f"del_{i}", on_click=remove_item, args=(i,)):
                 st.rerun()


    st.markdown(f"### üí∞ **–ò–¢–û–ì–û: {total_sum:,.2f} –†–£–ë.**")
    
else:
    st.info("–í –∑–∞–∫–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–π. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä.")


st.markdown("---")


# ----------------------------------------------------------------------------------------------------------------------
## –ë–ª–æ–∫ –û—Ç–ø—Ä–∞–≤–∫–∏ –∏ –°—Å—ã–ª–æ–∫
# ----------------------------------------------------------------------------------------------------------------------


st.subheader("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ó–∞—è–≤–∫–∏")


valid_phone = is_valid_phone(st.session_state.k_client_phone)


is_ready_to_send = (
    st.session_state.k_order_number and 
    valid_phone and 
    st.session_state.k_address and 
    st.session_state.calculator_items 
)


# --- –î–û–ë–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø –ü–†–ï–î–û–¢–í–†–ê–©–ï–ù–ò–Ø –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø –í –†–ï–ñ–ò–ú–ï –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø ---
can_save = is_ready_to_send


if st.session_state.app_mode == 'edit' and not st.session_state.k_target_row_index:
     can_save = False
     if is_ready_to_send: # –ü–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –Ω–æ –∑–∞—è–≤–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
         st.error("‚ùå –í —Ä–µ–∂–∏–º–µ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å' –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞—è–≤–∫—É –ø–æ –Ω–æ–º–µ—Ä—É, –Ω–∞–∂–∞–≤ '–ó–∞–≥—Ä—É–∑–∏—Ç—å –ó–∞—è–≤–∫—É'.")
# ------------------------------------------------------------------------------------


order_details = "\n".join(
    [f"{item['–ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï']} - {item['–ö–û–õ–ò–ß–ï–°–¢–í–û']} —à—Ç. (–ø–æ {item['–¶–ï–ù–ê_–ó–ê_–ï–î']:,.2f} –†–£–ë.)" 
     for item in st.session_state.calculator_items]
)


if not is_ready_to_send and st.session_state.app_mode == 'new':
    missing_fields = []
    if not st.session_state.k_order_number: missing_fields.append("–ù–æ–º–µ—Ä –ó–∞—è–≤–∫–∏")
    if not st.session_state.k_client_phone: missing_fields.append("–¢–µ–ª–µ—Ñ–æ–Ω –ö–ª–∏–µ–Ω—Ç–∞")
    elif not valid_phone: missing_fields.append("–¢–µ–ª–µ—Ñ–æ–Ω (–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç 7XXXXXXXXXX)")
    if not st.session_state.k_address: missing_fields.append("–ê–¥—Ä–µ—Å –î–æ—Å—Ç–∞–≤–∫–∏")
    if not st.session_state.calculator_items: missing_fields.append("–°–æ—Å—Ç–∞–≤ –ó–∞–∫–∞–∑–∞")
    
    if missing_fields:
        st.error(f"‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å: {', '.join(missing_fields)}")


# 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
button_label = "üíæ –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –ó–∞—è–≤–∫—É" if st.session_state.k_target_row_index else "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ù–æ–≤—É—é –ó–∞—è–≤–∫—É"
button_type = "primary"


data_to_save = [
    datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
    st.session_state.k_order_number,
    valid_phone, 
    st.session_state.k_address,
    st.session_state.k_delivery_date.strftime('%Y-%m-%d') if st.session_state.k_delivery_date else "",
    st.session_state.k_comment,
    order_details,
    float(total_sum) if not math.isnan(total_sum) else 0.0
]


is_update = bool(st.session_state.k_target_row_index)


# 2. –ö–Ω–æ–ø–∫–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ CRM"
# –ò—Å–ø–æ–ª—å–∑—É–µ–º can_save –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
if st.button(button_label, disabled=not can_save, type=button_type, use_container_width=True):
    handle_save_and_clear(data_to_save, is_update)


# 3. –ë–ª–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ WhatsApp
if is_ready_to_send:
    
    whatsapp_data = {
        '–ù–û–ú–ï–†_–ó–ê–Ø–í–ö–ò': st.session_state.k_order_number,
        '–¢–ï–õ–ï–§–û–ù': st.session_state.k_client_phone,
        '–ê–î–†–ï–°': st.session_state.k_address,
        '–î–ê–¢–ê_–î–û–°–¢–ê–í–ö–ò': st.session_state.k_delivery_date.strftime('%d.%m.%Y'),
        '–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô': st.session_state.k_comment,
        '–ó–ê–ö–ê–ó': order_details
    }
    
    final_total_sum = float(total_sum) if not math.isnan(total_sum) else 0.0
    
    whatsapp_url = generate_whatsapp_url(valid_phone, whatsapp_data, final_total_sum)
    
    st.markdown("---")
    st.markdown(f"**–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É ({valid_phone}):**")
    
    st.markdown(
        f'<a href="{whatsapp_url}" target="_blank">'
        f'<button style="background-color:#25D366;color:white;padding:10px 20px;border:none;border-radius:5px;cursor:pointer;width:100%;">'
        f'üí¨ –û—Ç–∫—Ä—ã—Ç—å WhatsApp —Å –ó–∞–∫–∞–∑–æ–º'
        f'</button></a>',
        unsafe_allow_html=True
    )
    st.caption("–ö–ª–∏–∫–Ω–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —á–∞—Ç —Å –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")