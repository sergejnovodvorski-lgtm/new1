import streamlit as st
import gspread
import pandas as pd
import re
from datetime import datetime, timedelta
import urllib.parse
from typing import List, Dict, Any
import math


# =========================================================
# –ö–û–ù–°–¢–ê–ù–¢–´ –ò –ù–ê–°–¢–†–û–ô–ö–ò
# =========================================================


SPREADSHEET_NAME = "Start"
WORKSHEET_NAME_ORDERS = "–ó–ê–Ø–í–ö–ò"
WORKSHEET_NAME_PRICE = "–ü–†–ê–ô–°"


EXPECTED_HEADERS = [
    "–î–ê–¢–ê_–í–í–û–î–ê", "–ù–û–ú–ï–†_–ó–ê–Ø–í–ö–ò", "–¢–ï–õ–ï–§–û–ù", "–ê–î–†–ï–°", "–î–ê–¢–ê_–î–û–°–¢–ê–í–ö–ò", 
    "–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô", "–ó–ê–ö–ê–ó", "–°–£–ú–ú–ê"
]


MANAGER_WHATSAPP_PHONE = "79000000000"


st.set_page_config(
    page_title="CRM: –í–≤–æ–¥ –ù–æ–≤–æ–π –ó–∞—è–≤–∫–∏",
    layout="wide",
    initial_sidebar_state="expanded"
)


# =========================================================
# –ë–ê–ó–û–í–´–ï –§–£–ù–ö–¶–ò–ò
# =========================================================


@st.cache_resource(ttl=3600)
def get_gsheet_client():
    if "gcp_service_account" not in st.secrets:
        st.error("–°–µ–∫—Ä–µ—Ç 'gcp_service_account' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return None
    try:
        return gspread.service_account_from_dict(st.secrets["gcp_service_account"])
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        return None


@st.cache_resource
def get_orders_worksheet():
    gc = get_gsheet_client()
    if not gc:
        return None
    try:
        sh = gc.open(SPREADSHEET_NAME)
        worksheet = sh.worksheet(WORKSHEET_NAME_ORDERS)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        current_headers = worksheet.row_values(1)
        if current_headers != EXPECTED_HEADERS:
            worksheet.update('A1', [EXPECTED_HEADERS])
        return worksheet
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–∏—Å—Ç—É: {e}")
        return None


@st.cache_data(ttl="1h")
def load_price_list():
    gc = get_gsheet_client()
    if not gc:
        return pd.DataFrame()
    try:
        sh = gc.open(SPREADSHEET_NAME)
        worksheet = sh.worksheet(WORKSHEET_NAME_PRICE)
        data = worksheet.get_all_records()
        df = pd.DataFrame(data)
        if '–ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï' not in df.columns or '–¶–ï–ù–ê' not in df.columns:
            st.error("–í –ø—Ä–∞–π—Å–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã")
            return pd.DataFrame()
        df['–¶–ï–ù–ê'] = pd.to_numeric(df['–¶–ï–ù–ê'], errors='coerce')
        df.dropna(subset=['–¶–ï–ù–ê'], inplace=True)
        return df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–π—Å–∞: {e}")
        return pd.DataFrame()


def is_valid_phone(phone: str) -> str:
    normalized = re.sub(r'\D', '', phone)
    if normalized.startswith('8') and len(normalized) == 11:
        normalized = '7' + normalized[1:]
    if len(normalized) == 11 and normalized.startswith('7'):
        return normalized
    return ""


def get_default_delivery_date():
    return datetime.today().date() + timedelta(days=1)


# =========================================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# =========================================================


def reset_quantity():
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤ 1 –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞."""
    # –≠—Ç—É –æ–ø–µ—Ä–∞—Ü–∏—é —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –≤ on_click/callback
    st.session_state.new_item_qty_input = 1


def parse_order_text_to_items(order_text: str) -> List[Dict[str, Any]]:
    items = []
    pattern = re.compile(r'(.+?) - (\d+)\s*—à—Ç\.\s*\(–ø–æ\s*([\d\s,.]+)\s*–†–£–ë\.\)')
    
    for line in order_text.split('\n'):
        match = pattern.search(line.strip())
        if match:
            name = match.group(1).strip()
            qty = int(match.group(2))
            price_str = match.group(3).replace(' ', '').replace(',', '.')
            try:
                price_per_unit = float(price_str)
            except ValueError:
                price_per_unit = 0.0
                
            items.append({
                '–ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï': name,
                '–ö–û–õ–ò–ß–ï–°–¢–í–û': qty,
                '–¶–ï–ù–ê_–ó–ê_–ï–î': price_per_unit,
                '–°–£–ú–ú–ê': price_per_unit * qty
            })
    
    return items


def save_order_data(data_row: List[Any], orders_ws) -> bool:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É"""
    if not orders_ws:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google Sheets")
        return False
    
    try:
        orders_ws.append_row(data_row)
        return True
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        return False


def update_order_data(order_number: str, data_row: List[Any], orders_ws) -> bool:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞—è–≤–∫—É, –Ω–∞—Ö–æ–¥—è —Ç–æ—á–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ –≤ Gspread
    (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –∏–∑-–∑–∞ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫).
    """
    if not orders_ws:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google Sheets")
        return False
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞ '–ù–û–ú–ï–†_–ó–ê–Ø–í–ö–ò' (B, –∏–Ω–¥–µ–∫—Å 2)
        col_values = orders_ws.col_values(2) 
        
        # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É (–∏–Ω–¥–µ–∫—Å) –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞—è–≤–∫–∏ —Å —ç—Ç–∏–º –Ω–æ–º–µ—Ä–æ–º,
        # –∏—â–∞ —Å –∫–æ–Ω—Ü–∞ —Å–ø–∏—Å–∫–∞, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é –∑–∞—è–≤–∫–∏.
        target_gspread_row_index = -1
        for i in range(len(col_values) - 1, 0, -1):
            if str(col_values[i]) == order_number:
                # –ò–Ω–¥–µ–∫—Å –≤ col_values –Ω–∞ 1 –º–µ–Ω—å—à–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫–∏.
                target_gspread_row_index = i + 1 
                break
        
        if target_gspread_row_index == -1:
            st.error(f"–ó–∞—è–≤–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º {order_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ.")
            return False
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –æ—Ç A –¥–æ H –≤ –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
        orders_ws.update(f'A{target_gspread_row_index}:H{target_gspread_row_index}', [data_row])
        return True
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        return False


def generate_whatsapp_url(target_phone: str, order_data: Dict[str, str], total_sum: float) -> str:
    text = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞:\n\n"
    text += f"üìã *–ù–æ–º–µ—Ä –ó–∞—è–≤–∫–∏:* {order_data['–ù–û–ú–ï–†_–ó–ê–Ø–í–ö–ò']}\n"
    text += f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {order_data['–¢–ï–õ–ï–§–û–ù']}\n"
    text += f"üìç *–ê–¥—Ä–µ—Å:* {order_data['–ê–î–†–ï–°']}\n"
    text += f"üóìÔ∏è *–î–∞—Ç–∞ –î–æ—Å—Ç–∞–≤–∫–∏:* {order_data['–î–ê–¢–ê_–î–û–°–¢–ê–í–ö–ò']}\n"
    
    if order_data.get('–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô'):
        text += f"üìù *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {order_data['–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô']}\n"
    
    text += f"\nüõí *–°–æ—Å—Ç–∞–≤ –ó–∞–∫–∞–∑–∞:*\n{order_data['–ó–ê–ö–ê–ó']}\n\n"
    text += f"üí∞ *–ò–¢–û–ì–û: {total_sum:,.2f} –†–£–ë.*\n\n"
    text += "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è."
    
    encoded_text = urllib.parse.quote(text)
    normalized_phone = is_valid_phone(target_phone)
    
    if not normalized_phone:
        target_phone_final = MANAGER_WHATSAPP_PHONE
    else:
        target_phone_final = normalized_phone
        
    return f"https://wa.me/{target_phone_final}?text={encoded_text}"




# =========================================================
# –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
# =========================================================


def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è (–°–¥–µ–ª–∞–Ω–æ –Ω–∞–¥–µ–∂–Ω–æ)
    if 'app_mode' not in st.session_state:
        st.session_state.app_mode = 'new'
    if 'calculator_items' not in st.session_state:
        st.session_state.calculator_items = []
    if 'k_order_number' not in st.session_state:
        st.session_state.k_order_number = ""
    if 'k_client_phone' not in st.session_state:
        st.session_state.k_client_phone = ""
    if 'k_address' not in st.session_state:
        st.session_state.k_address = ""
    if 'k_comment' not in st.session_state:
        st.session_state.k_comment = ""
    if 'k_delivery_date' not in st.session_state:
        st.session_state.k_delivery_date = get_default_delivery_date()
    if 'new_item_qty' not in st.session_state:
        st.session_state.new_item_qty = 1
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª—é—á–∞ –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞ number_input
    if 'new_item_qty_input' not in st.session_state:
        st.session_state.new_item_qty_input = 1
    if 'last_success_message' not in st.session_state:
        st.session_state.last_success_message = None
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    price_df = load_price_list()
    orders_ws = get_orders_worksheet()
    price_items = ["--- –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é ---"] + price_df['–ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï'].tolist() if not price_df.empty else ["--- –ü—Ä–∞–π—Å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω ---"]


    st.title("–í–≤–æ–¥ –ù–æ–≤–æ–π –ó–∞—è–≤–∫–∏ CRM üìù")


    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if st.session_state.last_success_message:
        st.success(st.session_state.last_success_message)
        st.session_state.last_success_message = None


    # =========================================================
    # –í–´–ë–û–† –†–ï–ñ–ò–ú–ê –†–ê–ë–û–¢–´
    # =========================================================


    st.subheader("–í—ã–±–æ—Ä –†–µ–∂–∏–º–∞ –†–∞–±–æ—Ç—ã")


    mode = st.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        ['–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é'],
        horizontal=True,
        key='mode_selector'
    )


    if mode == '–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞' and st.session_state.app_mode != 'new':
        st.session_state.app_mode = 'new'
        st.session_state.k_order_number = ""
        st.session_state.k_client_phone = ""
        st.session_state.k_address = ""
        st.session_state.k_comment = ""
        st.session_state.k_delivery_date = get_default_delivery_date()
        st.session_state.calculator_items = []
        st.rerun()
    elif mode == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é' and st.session_state.app_mode != 'edit':
        st.session_state.app_mode = 'edit'
        st.session_state.k_order_number = ""
        st.session_state.k_client_phone = ""
        st.session_state.k_address = ""
        st.session_state.k_comment = ""
        st.session_state.k_delivery_date = get_default_delivery_date()
        st.session_state.calculator_items = []
        st.rerun()


    st.info("‚ûï **–†–µ–∂–∏–º –°–æ–∑–¥–∞–Ω–∏—è –ù–æ–≤–æ–π –ó–∞—è–≤–∫–∏**" if st.session_state.app_mode == 'new' else "üîÑ **–†–µ–∂–∏–º –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∏**")


    # =========================================================
    # –ü–û–ò–°–ö –°–£–©–ï–°–¢–í–£–Æ–©–ï–ô –ó–ê–Ø–í–ö–ò
    # =========================================================


    if st.session_state.app_mode == 'edit':
        st.subheader("–ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        search_number = st.text_input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞:", key='search_input')
        
        if st.button("üîç –ù–∞–π—Ç–∏ –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞—è–≤–∫—É", use_container_width=True):
            if search_number and orders_ws:
                try:
                    data = orders_ws.get_all_records()
                    df = pd.DataFrame(data)
                    target_rows = df[df['–ù–û–ú–ï–†_–ó–ê–Ø–í–ö–ò'].astype(str) == search_number]
                    
                    if not target_rows.empty:
                        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å
                        row = target_rows.iloc[-1].to_dict()
                        
                        # --- –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–ï–†–ï–ú–ï–ù–ù–´–• –°–û–°–¢–û–Ø–ù–ò–Ø ---
                        st.session_state.k_order_number = str(row.get('–ù–û–ú–ï–†_–ó–ê–Ø–í–ö–ò', ''))
                        st.session_state.k_client_phone = str(row.get('–¢–ï–õ–ï–§–û–ù', ''))
                        st.session_state.k_address = str(row.get('–ê–î–†–ï–°', ''))
                        st.session_state.k_comment = str(row.get('–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô', ''))
                        
                        # –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
                        delivery_date_str = str(row.get('–î–ê–¢–ê_–î–û–°–¢–ê–í–ö–ò', ''))
                        try:
                            date_obj = datetime.strptime(delivery_date_str, '%Y-%m-%d').date()
                            st.session_state.k_delivery_date = date_obj
                        except (ValueError, TypeError):
                            st.session_state.k_delivery_date = get_default_delivery_date()
                        
                        # –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞
                        order_text = str(row.get('–ó–ê–ö–ê–ó', ''))
                        st.session_state.calculator_items = parse_order_text_to_items(order_text)
                        
                        st.success(f"‚úÖ –ó–∞—è–≤–∫–∞ ‚Ññ{search_number} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –û–±–Ω–æ–≤–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å'.")
                        st.rerun()
                    else:
                        st.error(f"‚ùå –ó–∞—è–≤–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º {search_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–∫–∏: {e}")
            else:
                st.error("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏")


        st.markdown("---")


    # =========================================================
    # –û–°–ù–û–í–ù–ê–Ø –§–û–†–ú–ê
    # =========================================================


    st.subheader("–û—Å–Ω–æ–≤–Ω—ã–µ –î–∞–Ω–Ω—ã–µ –ó–∞—è–≤–∫–∏")


    col1, col2 = st.columns(2)


    with col1:
        if st.session_state.app_mode == 'new':
            # –õ–æ–≥–∏–∫–∞ –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞ –¥–ª—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏
            if not st.session_state.k_order_number or st.session_state.k_order_number == "":
                try:
                    if orders_ws:
                        data = orders_ws.get_all_records()
                        df = pd.DataFrame(data)
                        if not df.empty and '–ù–û–ú–ï–†_–ó–ê–Ø–í–ö–ò' in df.columns:
                            order_numbers = [int(n) for n in df['–ù–û–ú–ï–†_–ó–ê–Ø–í–ö–ò'] if str(n).isdigit()]
                            next_number = max(order_numbers) + 1 if order_numbers else 1001
                            st.session_state.k_order_number = str(next_number)
                        else:
                            st.session_state.k_order_number = "1001"
                    else:
                        st.session_state.k_order_number = "1001"
                except:
                    st.session_state.k_order_number = "1001"
            
            st.text_input("–ù–æ–º–µ—Ä –ó–∞—è–≤–∫–∏", value=st.session_state.k_order_number, disabled=True, key='display_order_number')
        else:
            st.text_input("–ù–æ–º–µ—Ä –ó–∞—è–≤–∫–∏", value=st.session_state.k_order_number, disabled=True, key='display_order_number_edit')


        st.text_input(
            "–¢–µ–ª–µ—Ñ–æ–Ω –ö–ª–∏–µ–Ω—Ç–∞ (—Å 7)",
            value=st.session_state.k_client_phone,
            key='k_client_phone' 
        )


    with col2:
        st.date_input(
            "–î–∞—Ç–∞ –î–æ—Å—Ç–∞–≤–∫–∏",
            value=st.session_state.k_delivery_date,
            min_value=datetime.today().date(),
            key='k_delivery_date' 
        )
        
        st.text_input(
            "–ê–¥—Ä–µ—Å –î–æ—Å—Ç–∞–≤–∫–∏",
            value=st.session_state.k_address,
            key='k_address'
        )


    st.text_area(
        "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π / –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ",
        value=st.session_state.k_comment,
        height=50,
        key='k_comment' 
    )


    st.markdown("---")


    # =========================================================
    # –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –ó–ê–ö–ê–ó–ê
    # =========================================================


    st.subheader("–°–æ—Å—Ç–∞–≤ –ó–∞–∫–∞–∑–∞ (–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä)")


    col_item, col_qty, col_add = st.columns([4, 1, 1])


    with col_item:
        selected_item = st.selectbox("–í—ã–±–æ—Ä –ø–æ–∑–∏—Ü–∏–∏", price_items, disabled=price_df.empty)


    with col_qty:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º session_state.new_item_qty_input –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–µ–º
        quantity = st.number_input(
            "–ö–æ–ª-–≤–æ", 
            min_value=1, 
            step=1, 
            value=st.session_state.new_item_qty_input, 
            key='new_item_qty_input'
        )


    with col_add:
        st.markdown(" ")
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: on_click –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        if st.button(
            "‚ûï –î–æ–±–∞–≤–∏—Ç—å", 
            use_container_width=True, 
            disabled=selected_item == price_items[0],
            on_click=reset_quantity # <--- –°–±—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        ):
            if selected_item != price_items[0]:
                price_row = price_df[price_df['–ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï'] == selected_item]
                if not price_row.empty:
                    price = float(price_row.iloc[0]['–¶–ï–ù–ê'])
                    st.session_state.calculator_items.append({
                        '–ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï': selected_item,
                        # –ë–µ—Ä–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–ª—é—á–∞ –≤–∏–¥–∂–µ—Ç–∞
                        '–ö–û–õ–ò–ß–ï–°–¢–í–û': st.session_state.new_item_qty_input, 
                        '–¶–ï–ù–ê_–ó–ê_–ï–î': price,
                        '–°–£–ú–ú–ê': price * st.session_state.new_item_qty_input
                    })
                    # st.rerun() –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ on_click –∏ –ª–æ–≥–∏–∫–∏ –∫–Ω–æ–ø–∫–∏.
                    st.rerun() # –û—Å—Ç–∞–≤–ª—è–µ–º rerund –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤


    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
    total_sum = 0
    if st.session_state.calculator_items:
        df_items = pd.DataFrame(st.session_state.calculator_items)
        total_sum = df_items['–°–£–ú–ú–ê'].sum()
        
        st.dataframe(
            df_items[['–ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï', '–ö–û–õ–ò–ß–ï–°–¢–í–û', '–¶–ï–ù–ê_–ó–ê_–ï–î', '–°–£–ú–ú–ê']],
            column_config={
                '–ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï': '–¢–æ–≤–∞—Ä',
                '–ö–û–õ–ò–ß–ï–ï–°–¢–í–û': '–ö–æ–ª-–≤–æ',
                '–¶–ï–ù–ê_–ó–ê_–ï–î': st.column_config.NumberColumn("–¶–µ–Ω–∞ –∑–∞ –µ–¥.", format="%.2f –†–£–ë."),
                '–°–£–ú–ú–ê': st.column_config.NumberColumn("–°—É–º–º–∞", format="%.2f –†–£–ë."),
            },
            hide_index=True,
            use_container_width=True
        )
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π
        st.markdown("##### –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π:")
        for i in range(len(st.session_state.calculator_items) - 1, -1, -1):
            item = st.session_state.calculator_items[i]
            col_name, col_sum, col_del = st.columns([5, 1.5, 0.5])
            with col_name:
                st.write(f"**{item['–ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï']}** ({item['–ö–û–õ–ò–ß–ï–°–¢–í–û']} —à—Ç.)")
            with col_sum:
                st.write(f"**{item['–°–£–ú–ú–ê']:,.2f} –†–£–ë.**")
            with col_del:
                if st.button("‚ùå", key=f"del_{i}"):
                    st.session_state.calculator_items.pop(i)
                    st.rerun()
        
        st.markdown(f"### üí∞ **–ò–¢–û–ì–û: {total_sum:,.2f} –†–£–ë.**")
    else:
        st.info("–í –∑–∞–∫–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–π. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä.")


    st.markdown("---")


    # =========================================================
    # –°–û–•–†–ê–ù–ï–ù–ò–ï –î–ê–ù–ù–´–•
    # =========================================================


    st.subheader("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ó–∞—è–≤–∫–∏")


    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é (–ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ st.session_state)
    valid_phone = is_valid_phone(st.session_state.k_client_phone)
    is_ready_to_send = (
        st.session_state.k_order_number and 
        valid_phone and 
        st.session_state.k_address and 
        st.session_state.calculator_items
    )


    if not is_ready_to_send:
        missing_fields = []
        if not st.session_state.k_order_number:
            missing_fields.append("–ù–æ–º–µ—Ä –ó–∞—è–≤–∫–∏")
        if not st.session_state.k_client_phone:
            missing_fields.append("–¢–µ–ª–µ—Ñ–æ–Ω –ö–ª–∏–µ–Ω—Ç–∞")
        elif not valid_phone:
            missing_fields.append("–¢–µ–ª–µ—Ñ–æ–Ω (–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç 7XXXXXXXXXX)")
        if not st.session_state.k_address:
            missing_fields.append("–ê–¥—Ä–µ—Å –î–æ—Å—Ç–∞–≤–∫–∏")
        if not st.session_state.calculator_items:
            missing_fields.append("–°–æ—Å—Ç–∞–≤ –ó–∞–∫–∞–∑–∞")
        
        if missing_fields:
            st.error(f"‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å: {', '.join(missing_fields)}")


    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    order_details = "\n".join(
        [f"{item['–ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï']} - {item['–ö–û–õ–ò–ß–ï–°–¢–í–û']} —à—Ç. (–ø–æ {item['–¶–ï–ù–ê_–ó–ê_–ï–î']:,.2f} –†–£–ë.)" 
         for item in st.session_state.calculator_items]
    )


    data_to_save = [
        datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        st.session_state.k_order_number,
        valid_phone,
        st.session_state.k_address,
        st.session_state.k_delivery_date.strftime('%Y-%m-%d'),
        st.session_state.k_comment,
        order_details,
        float(total_sum) if not math.isnan(total_sum) else 0.0
    ]


    # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    if st.session_state.app_mode == 'new':
        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ù–æ–≤—É—é –ó–∞—è–≤–∫—É", disabled=not is_ready_to_send, type="primary", use_container_width=True):
            if save_order_data(data_to_save, orders_ws):
                st.session_state.last_success_message = f"üéâ –ó–∞—è–≤–∫–∞ ‚Ññ{st.session_state.k_order_number} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!"
                # –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
                st.session_state.k_order_number = ""
                st.session_state.k_client_phone = ""
                st.session_state.k_address = ""
                st.session_state.k_comment = ""
                st.session_state.k_delivery_date = get_default_delivery_date()
                st.session_state.calculator_items = []
                st.rerun()
    else:
        if st.button("üíæ –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –ó–∞—è–≤–∫—É", disabled=not is_ready_to_send, type="primary", use_container_width=True):
            if update_order_data(st.session_state.k_order_number, data_to_save, orders_ws):
                st.session_state.last_success_message = f"üéâ –ó–∞—è–≤–∫–∞ ‚Ññ{st.session_state.k_order_number} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–∞!"
                st.rerun()


    # –°—Å—ã–ª–∫–∞ WhatsApp
    if is_ready_to_send:
        whatsapp_data = {
            '–ù–û–ú–ï–†_–ó–ê–Ø–í–ö–ò': st.session_state.k_order_number,
            '–¢–ï–õ–ï–§–û–ù': st.session_state.k_client_phone,
            '–ê–î–†–ï–°': st.session_state.k_address,
            '–î–ê–¢–ê_–î–û–°–¢–ê–í–ö–ò': st.session_state.k_delivery_date.strftime('%d.%m.%Y'),
            '–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô': st.session_state.k_comment,
            '–ó–ê–ö–ê–ó': order_details
        }
        
        final_total_sum = float(total_sum) if not math.isnan(total_sum) else 0.0
        whatsapp_url = generate_whatsapp_url(valid_phone, whatsapp_data, final_total_sum)
        
        st.markdown("---")
        st.markdown(f"**–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É ({valid_phone}):**")
        st.markdown(
            f'<a href="{whatsapp_url}" target="_blank">'
            f'<button style="background-color:#25D366;color:white;padding:10px 20px;border:none;border-radius:5px;cursor:pointer;width:100%;">'
            f'üí¨ –û—Ç–∫—Ä—ã—Ç—å WhatsApp —Å –ó–∞–∫–∞–∑–æ–º'
            f'</button></a>',
            unsafe_allow_html=True
        )


if __name__ == "__main__":
    main()