import streamlit as st
import gspread
import pandas as pd
import re 
from datetime import datetime, timedelta
import urllib.parse 
import time


# =========================================================
# 1. –ö–û–ù–°–¢–ê–ù–¢–´ –ò –ù–ê–°–¢–†–û–ô–ö–ò
# =========================================================


SPREADSHEET_NAME = "Start" 
WORKSHEET_NAME_ORDERS = "–ó–ê–Ø–í–ö–ò"
# –£–ö–ê–ñ–ò–¢–ï –°–í–û–ô –ù–û–ú–ï–† –ú–ï–ù–ï–î–ñ–ï–†–ê
MANAGER_WHATSAPP_PHONE = "79000000000" 


st.set_page_config(
    page_title="CRM: –í–≤–æ–¥ –ù–æ–≤–æ–π –ó–∞—è–≤–∫–∏", 
    layout="wide",
    initial_sidebar_state="expanded"
)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
if 'critical_error' not in st.session_state:
    st.session_state.critical_error = None
if 'calculator_items' not in st.session_state:
    st.session_state.calculator_items = []
if 'k_client_phone' not in st.session_state:
    st.session_state.k_client_phone = ""
if 'k_order_number' not in st.session_state:
    st.session_state.k_order_number = ""
if 'k_delivery_date' not in st.session_state:
    st.session_state.k_delivery_date = datetime.today().date() + timedelta(days=1)
    
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏
def set_critical_error(message, error_details=None):
    full_message = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {message}"
    if error_details:
        full_message += f"\n\n–î–µ—Ç–∞–ª–∏: {error_details}"
    st.session_state.critical_error = full_message




# =========================================================
# 2. –§–£–ù–ö–¶–ò–ò –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ò –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø (–í–ê–® –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô –ö–û–î –° –ò–ó–ú–ï–ù–ï–ù–ò–Ø–ú–ò –î–õ–Ø st.session_state)
# =========================================================


@st.cache_resource(ttl=3600)
def get_gsheet_client():
    if "gcp_service_account" not in st.secrets:
        set_critical_error("–°–µ–∫—Ä–µ—Ç 'gcp_service_account' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return None 
    try:
        gc = gspread.service_account_from_dict(st.secrets["gcp_service_account"])
        return gc
    except Exception as e:
        set_critical_error("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ gspread.", f"–û—à–∏–±–∫–∞: {e}")
        return None




@st.cache_data(ttl="1h")
def load_price_list():
    gc = get_gsheet_client()
    if not gc: return pd.DataFrame() 
        
    try:
        sh = gc.open(SPREADSHEET_NAME) 
        worksheet = sh.worksheet("–ü–†–ê–ô–°") 
        data = worksheet.get_all_records()
        df = pd.DataFrame(data)
        if '–¶–ï–ù–ê' in df.columns:
            df['–¶–ï–ù–ê'] = pd.to_numeric(df['–¶–ï–ù–ê'], errors='coerce')
        st.info(f"‚úÖ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ. –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(df)} –ø–æ–∑–∏—Ü–∏–π.")
        return df
    except gspread.exceptions.SpreadsheetNotFound:
        set_critical_error(f"Google –¢–∞–±–ª–∏—Ü–∞ '{SPREADSHEET_NAME}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except gspread.exceptions.WorksheetNotFound:
        set_critical_error("–õ–∏—Å—Ç '–ü–†–ê–ô–°' –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è.")
    except Exception as e:
        set_critical_error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∞–π—Å–∞ (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏).", f"–û—à–∏–±–∫–∞: {e}")
    return pd.DataFrame()




@st.cache_resource
def get_orders_worksheet():
    gc = get_gsheet_client()
    if not gc: return None
    try:
        sh = gc.open(SPREADSHEET_NAME) 
        return sh.worksheet(WORKSHEET_NAME_ORDERS)
    except gspread.exceptions.WorksheetNotFound:
         set_critical_error(f"–õ–∏—Å—Ç –¥–ª—è –∑–∞—è–≤–æ–∫ '{WORKSHEET_NAME_ORDERS}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
         return None
    except Exception as e:
        set_critical_error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–∏—Å—Ç—É '{WORKSHEET_NAME_ORDERS}'.", f"–û—à–∏–±–∫–∞: {e}")
        return None


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
price_df = load_price_list() 
orders_ws = get_orders_worksheet()
price_items = ["--- –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é ---"] + price_df['–ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï'].tolist()




# =========================================================
# 3. –§–£–ù–ö–¶–ò–ò –õ–û–ì–ò–ö–ò (–ü–ê–†–°–ò–ù–ì –ò –ó–ê–ü–ò–°–¨)
# =========================================================


def parse_conversation(text):
    """–ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è st.session_state."""
    
    # 1. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–æ—Ç–µ)
    phone_matches = re.findall(r'(?:\+7|8|\b7)?\s*\(?\s*(\d{3})\s*\)?\s*(\d{3})[-\s]*(\d{2})[-\s]*(\d{2})', text)
    if phone_matches:
        phone_counts = {}
        for match in phone_matches:
            normalized_phone = "7" + "".join(match)
            phone_counts[normalized_phone] = phone_counts.get(normalized_phone, 0) + 1
        phone = max(phone_counts.items(), key=lambda item: item[1])[0]
        st.session_state['k_client_phone'] = phone
        st.info(f"‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞–π–¥–µ–Ω: **{phone}**")


    # 2. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏
    order_match = re.search(r'(?:–∑–∞—è–≤–∫[–∞–∏]|–∑–∞–∫–∞–∑|—Å—á–µ—Ç|‚Ññ)\s*(\d+)', text, re.IGNORECASE)
    if order_match:
        st.session_state['k_order_number'] = order_match.group(1)
        st.info(f"‚úÖ –ù–æ–º–µ—Ä –ó–∞—è–≤–∫–∏ –Ω–∞–π–¥–µ–Ω: {order_match.group(1)}")


    # 3. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏
    delivery_date = None
    if re.search(r'–¥–æ—Å—Ç–∞–≤[–∏—Ç—å–µ]|–Ω—É–∂–Ω–æ\s*–∫|–¥–∞—Ç–∞\s*–¥–æ—Å—Ç–∞–≤–∫[–∏]|—Å—Ä–æ–∫', text, re.IGNORECASE):
        if re.search(r'–∑–∞–≤—Ç—Ä–∞', text, re.IGNORECASE):
            delivery_date = datetime.today().date() + timedelta(days=1)
        elif re.search(r'–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞', text, re.IGNORECASE):
            delivery_date = datetime.today().date() + timedelta(days=2)
        else:
            date_match = re.search(r'(\d{1,2})[./](\d{1,2})(?:[./](\d{4}))?', text)
            if date_match:
                day, month, year = date_match.groups()
                current_year = datetime.today().year
                year = int(year) if year else current_year
                try:
                    delivery_date = datetime(year, int(month), int(day)).date()
                except ValueError:
                    pass
    
    if delivery_date:
        st.session_state['k_delivery_date'] = delivery_date
        st.info(f"‚úÖ –î–∞—Ç–∞ –î–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞–π–¥–µ–Ω–∞: **{delivery_date.strftime('%d.%m.%Y')}**")




def save_data_to_gsheets(data_row):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –ª–∏—Å—Ç –ó–ê–Ø–í–ö–ò."""
    if orders_ws is None:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ª–∏—Å—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö.")
        return False
    try:
        orders_ws.append_row(data_row)
        return True
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}")
        return False


# =========================================================
# 4. –§–£–ù–ö–¶–ò–ò –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê –ò –ò–ù–¢–ï–†–§–ï–ô–°
# =========================================================


def add_item():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –≤ —Å–ø–∏—Å–æ–∫ –≤ session_state."""
    selected_name = st.session_state['new_item_select']
    quantity = st.session_state['new_item_qty']
    
    if selected_name != "--- –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é ---" and quantity > 0:
        price_row = price_df[price_df['–ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï'] == selected_name].iloc[0]
        price = price_row['–¶–ï–ù–ê']
        
        st.session_state.calculator_items.append({
            '–ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï': selected_name,
            '–ö–û–õ–ò–ß–ï–°–¢–í–û': quantity,
            '–¶–ï–ù–ê_–ó–ê_–ï–î': price,
            '–°–£–ú–ú–ê': price * quantity
        })


def remove_item(index):
    """–£–¥–∞–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É."""
    st.session_state.calculator_items.pop(index)


def generate_whatsapp_url(phone, order_data, total_sum):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ WhatsApp —Å –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º."""
    text = f"‚úÖ –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê (CRM)\n"
    text += f"üìÖ –î–∞—Ç–∞: {order_data['–î–ê–¢–ê_–í–í–û–î–ê']}\n"
    text += f"üÜî –ù–æ–º–µ—Ä: {order_data['–ù–û–ú–ï–†_–ó–ê–Ø–í–ö–ò']}\n"
    text += f"üë§ –ö–ª–∏–µ–Ω—Ç: {order_data['–ö–õ–ò–ï–ù–¢']}\n"
    text += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order_data['–¢–ï–õ–ï–§–û–ù']}\n"
    text += f"üìç –ê–¥—Ä–µ—Å: {order_data['–ê–î–†–ï–°']}\n"
    text += f"üóìÔ∏è –î–æ—Å—Ç–∞–≤–∫–∞: {order_data['–î–ê–¢–ê_–î–û–°–¢–ê–í–ö–ò']}\n\n"
    text += f"üõí –ó–∞–∫–∞–∑:\n{order_data['–ó–ê–ö–ê–ó']}\n"
    text += f"üí∞ *–ò–¢–û–ì–û: {total_sum:,.2f} –†–£–ë.*\n"
    
    # –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è URL
    encoded_text = urllib.parse.quote(text)
    return f"https://wa.me/{phone}?text={encoded_text}"




def submit_order(total_sum, order_items_text, form_data):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã: –∑–∞–ø–∏—Å—å –≤ GS –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."""
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è Google Sheets (—Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–ª–æ–Ω–∫–∞–º –ª–∏—Å—Ç–∞ –ó–ê–Ø–í–ö–ò)
    data_row = [
        datetime.now().strftime("%d.%m.%Y %H:%M"), # –î–ê–¢–ê_–í–í–û–î–ê
        form_data['order_number'],                # –ù–û–ú–ï–†_–ó–ê–Ø–í–ö–ò
        form_data['client_name'],                 # –ö–õ–ò–ï–ù–¢
        form_data['client_phone'],                # –¢–ï–õ–ï–§–û–ù
        form_data['client_address'],              # –ê–î–†–ï–°
        form_data['delivery_date'].strftime("%d.%m.%Y"), # –î–ê–¢–ê_–î–û–°–¢–ê–í–ö–ò
        order_items_text,                         # –ó–ê–ö–ê–ó (—Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤)
        total_sum,                                # –°–£–ú–ú–ê
        "–ù–æ–≤–∞—è"                                   # –°–¢–ê–¢–£–°
    ]
    
    if save_data_to_gsheets(data_row):
        st.success("üéâ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Google Sheets!")
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è WhatsApp —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        whatsapp_data = {
            '–î–ê–¢–ê_–í–í–û–î–ê': data_row[0],
            '–ù–û–ú–ï–†_–ó–ê–Ø–í–ö–ò': data_row[1],
            '–ö–õ–ò–ï–ù–¢': data_row[2],
            '–¢–ï–õ–ï–§–û–ù': data_row[3],
            '–ê–î–†–ï–°': data_row[4],
            '–î–ê–¢–ê_–î–û–°–¢–ê–í–ö–ò': data_row[5],
            '–ó–ê–ö–ê–ó': order_items_text,
        }
        
        whatsapp_link = generate_whatsapp_url(MANAGER_WHATSAPP_PHONE, whatsapp_data, total_sum)
        
        st.markdown(f"**–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É:**")
        st.link_button("üì≤ –û–¢–ü–†–ê–í–ò–¢–¨ –í WHATSAPP", whatsapp_link, type="primary")
        
        # –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        st.session_state.calculator_items = []
        st.session_state.k_client_phone = ""
        st.session_state.k_order_number = ""
        st.session_state.k_delivery_date = datetime.today().date() + timedelta(days=1)
        st.rerun() # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–æ–ª–µ–π




# =========================================================
# 5. –û–°–ù–û–í–ù–û–ï –¢–ï–õ–û –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
# =========================================================


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
if st.session_state.critical_error:
    st.error("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò")
    st.markdown(f"**–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑-–∑–∞ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–±–ª–µ–º—ã:**")
    st.code(st.session_state.critical_error, language='markdown')
    # –í—ã–≤–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω


else:
    st.title("CRM: –í–≤–æ–¥ –ù–æ–≤–æ–π –ó–∞—è–≤–∫–∏")
    
    # ----------------------------------------------------
    # –°–ï–ö–¶–ò–Ø –ü–ê–†–°–ò–ù–ì–ê
    # ----------------------------------------------------
    st.header("1. –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ –ø–µ—Ä–µ–ø–∏—Å–∫–µ")
    conversation_text = st.text_area(
        "–í—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–ø–∏—Å–∫–∏/–∑–∞–∫–∞–∑–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:", 
        height=150,
        placeholder="–ü—Ä–∏–º–µ—Ä: '–ú–Ω–µ –Ω—É–∂–µ–Ω –∑–∞–∫–∞–∑ ‚Ññ123, –ø—Ä–∏–≤–µ–∑–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞ –Ω–∞ –∞–¥—Ä–µ—Å –ú–æ—Å–∫–≤–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞, 55. –ú–æ–π –Ω–æ–º–µ—Ä 79011234567'"
    )
    if st.button("üîç –ü–ê–†–°–ò–¢–¨ –¢–ï–ö–°–¢", type="secondary"):
        parse_conversation(conversation_text)
    
    st.divider()


    # ----------------------------------------------------
    # –§–û–†–ú–ê –í–í–û–î–ê –ó–ê–Ø–í–ö–ò
    # ----------------------------------------------------
    
    st.header("2. –î–∞–Ω–Ω—ã–µ –ó–∞—è–≤–∫–∏ –∏ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")


    with st.form("order_form", clear_on_submit=False):
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("–ö–ª–∏–µ–Ω—Ç –∏ –î–æ—Å—Ç–∞–≤–∫–∞")
            client_name = st.text_input("–ò–º—è –ö–ª–∏–µ–Ω—Ç–∞", key='client_name_input')
            client_phone = st.text_input(
                "–¢–µ–ª–µ—Ñ–æ–Ω", 
                value=st.session_state.k_client_phone, 
                key='client_phone_input'
            )
            client_address = st.text_area("–ê–¥—Ä–µ—Å –î–æ—Å—Ç–∞–≤–∫–∏", key='client_address_input', height=80)
            
        with col2:
            st.subheader("–ù–æ–º–µ—Ä –∏ –î–∞—Ç–∞")
            order_number = st.text_input(
                "–ù–æ–º–µ—Ä –ó–∞—è–≤–∫–∏ (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π)", 
                value=st.session_state.k_order_number,
                key='order_number_input'
            )
            delivery_date = st.date_input(
                "–î–∞—Ç–∞ –î–æ—Å—Ç–∞–≤–∫–∏", 
                value=st.session_state.k_delivery_date, 
                key='delivery_date_input'
            )
        
        st.markdown("---")
        st.subheader("–°–æ—Å—Ç–∞–≤ –ó–∞–∫–∞–∑–∞ (–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä)")
        
        col_select, col_qty, col_add = st.columns([5, 2, 1])
        
        with col_select:
            st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –∏–∑ –ø—Ä–∞–π—Å–∞", 
                options=price_items, 
                key='new_item_select'
            )
        with col_qty:
            st.number_input(
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", 
                min_value=1, 
                value=1, 
                step=1, 
                key='new_item_qty'
            )
        with col_add:
            # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
            st.markdown(" ") 
            st.form_submit_button("‚ûï –î–û–ë–ê–í–ò–¢–¨", on_click=add_item, type="secondary")
            
        # -------------------
        # –¢–ê–ë–õ–ò–¶–ê –ó–ê–ö–ê–ó–ê –ò –°–£–ú–ú–ê
        # -------------------
        
        total_sum = sum(item['–°–£–ú–ú–ê'] for item in st.session_state.calculator_items)
        
        st.markdown(f"#### üí∞ –ò–¢–û–ì–û: {total_sum:,.2f} –†–£–ë.")
        
        if st.session_state.calculator_items:
            items_df = pd.DataFrame(st.session_state.calculator_items)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å" —Ä—è–¥–æ–º —Å –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–æ–π
            for i, row in items_df.iterrows():
                col_i_name, col_i_qty, col_i_price, col_i_sum, col_i_del = st.columns([4, 2, 2, 2, 1])
                
                col_i_name.write(row['–ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï'])
                col_i_qty.write(f"{row['–ö–û–õ–ò–ß–ï–°–¢–í–û']}")
                col_i_price.write(f"{row['–¶–ï–ù–ê_–ó–ê_–ï–î']:,.2f}")
                col_i_sum.write(f"**{row['–°–£–ú–ú–ê']:,.2f}**")
                
                # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
                col_i_del.button("‚ùå", key=f'del_{i}', on_click=remove_item, args=(i,))


            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ Google Sheets
            order_items_list = [f"{i['–ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï']} x {i['–ö–û–õ–ò–ß–ï–°–¢–í–û']} ({i['–°–£–ú–ú–ê']:,.2f} —Ä—É–±.)" for i in st.session_state.calculator_items]
            order_items_text = "\n".join(order_items_list)
        else:
            st.info("–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–∞ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –ø—Ä–∞–π—Å–∞.")
            order_items_text = ""
            
        # -------------------
        # –ö–ù–û–ü–ö–ê –û–¢–ü–†–ê–í–ö–ò
        # -------------------
        
        st.markdown("---")
        
        submit_button = st.form_submit_button(
            "‚úÖ –°–û–•–†–ê–ù–ò–¢–¨ –ó–ê–Ø–í–ö–£ –ò –û–¢–ü–†–ê–í–ò–¢–¨ –£–í–ï–î–û–ú–õ–ï–ù–ò–ï", 
            type="primary", 
            disabled=(total_sum == 0 or not client_name or not client_phone or not client_address)
        )


        if submit_button:
            if total_sum == 0:
                st.warning("–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—É—Å—Ç–æ–π –∑–∞–∫–∞–∑.")
            else:
                form_data = {
                    'order_number': order_number,
                    'client_name': client_name,
                    'client_phone': client_phone,
                    'client_address': client_address,
                    'delivery_date': delivery_date
                }
                submit_order(total_sum, order_items_text, form_data)